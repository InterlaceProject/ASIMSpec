CoreASIM server

use Standard

init Start

scheduling whileRunning

//Predefined lists
universe ACCOUNT_TYPES = {fcredit, domu, feeg}
universe OPERATIONS = {credit, debit}
universe MEMBERs = {client, server, somebody}
universe CHANNELs = {phone, website, pos}

universe TransferTypeError = {error}

//for TransferTypeTable
universe Origin
universe Dst
controlled Channel: CHANNELs
controlled TransferTypeName: STRING
controlled Amount_Cond: INTEGER

//table where TransferTypes are stored, filled in Start rule
controlled TransferTypeTable: Channel * Origin * Dst * Amount_Cond -> TransferTypeName 

//all transferetypes by name, filled in Start rule
universe TransferType

policy whileRunning = skip

rule Start = {
	TransferTypeTable(phone, MEMBERs, MEMBERs, 5000) := "B2B-Mobile"
	TransferTypeTable(website, MEMBERs, MEMBERs, 10000) := "B2B-Website"
	TransferTypeTable(pos, MEMBERs, MEMBERs, 15000) := "B2B-Pos"
	
	TransferType := {"B2B-Mobile", "B2B-Website", "B2B-Pos"}
	
	program(self) := Program
}

// ------------------------------------------------------------------
//
// Credit and Debit request rules
//
// ------------------------------------------------------------------

// send Response to client
rule Send(response, mbr) = local response_text, response_subject in {
  pop response_subject from response
  pop response_text from response

  send response_text to mbr with subject response_subject
}

//prepare error message
derived ErrorMsg(text) = {
  ["Error", text]
}

// not permitted message
derived NotPermitted(transfer, ttRes) = {
	"Error occured; action not permitted: " + transfer + "; " + ttRes
}

//prepare normal message
derived YouMayProceedWith(transfer) = {
	["YouMayProceedWith", "You may proceed with " + transfer]
}


/* ASM - Template
Symbols 	€ => element of
			!€ => not element of

CreditPreviewReq((channel, from, to, amount, custFlds), mbr) =
	if Received(CreditPreviewReq(credit, channel, from, to, amount, custFlds), from: mbr) then
		let transfer = (credit, channel, from, to, amount, custFlds)
		let ttRes = transferTypeCheck(transfer)
			if ttRes !€ TransferType then
				Send(ErrMsg(NotPermitted(transfer, ttRes)), to: mbr)
			else Send(YouMayProceedWith(transfer), to: mbr)
		Consume(CreditPreviewReq(credit, channel, from, to, amount, custFlds), from: mbr)
	where
		transferTypeCheck(transfer ) €
			{tt}							if tt € TransferType and Match(tt , transfer)
			PowerSet(TransferTypeError) 	else
		Match(tt , transfer) if
			oper(tt) = credit and chan(tt) = channel and
			owner(from) (elementof) fromMemberGroup(tt) and owner(to) (elementof) toMemberGroup(tt) and
			sourceType(tt) = accountType(from) and destType(tt) = accountType(to) and
			custFieldCond(tt, custFlds) = true
*/
rule CreditPreviewReq(msg, mbr) = {
	print mbr + " -> CreditPreviewReq received: " + msg

	let transfer = msg in
		let ttRes = transferTypeCheck(transfer) in
			if ttRes notmemberof TransferType then
				Send(ErrorMsg(NotPermitted(transfer, ttRes)), mbr)
			else Send(YouMayProceedWith(transfer), mbr)
}
//where
	//transferTypeCheck
	derived transferTypeCheck(msg) = {
		if {tt | tt in TransferType with Match(tt, msg)} != undef then 
			{tt | tt in TransferType with Match(tt, msg)}
		else 
			powerset(TransferTypeError)
	}
	//Match
	derived Match(tt, transfer) = {
		//TODO: implement check for transfer has correct tt
		if tt = TransferType(0) then //dummy return values
			true
		else
			false
	}


/*
CreditPerformReq((channel; from; to; amount; custFlds); mbr) =
	if Received(CreditPerformReq(credit; channel; from; to; amount; custFlds); from: mbr) then
		let transfer = (credit; channel; from; to; amount; custFlds)
		let ttRes = transferTypeCheck(transfer)
			if ttRes ï¿½ TransferType then
				Send(ErrMsg(NotPermitted(transfer; ttRes)); to: mbr)
			else let bal = balanceCheck(from; to; amount)
				if bal = OK
				then
					Append(transaction(transfer; ttRes; today); Ledger)
					Send(Confirmed(transfer); to: mbr)
				else Send(ErrMsg(transfer; bal ); to: mbr)
		Consume(CreditPerformReq(channel; from; to; amount; custFlds); from: mbr)
	where
		balanceCheck(from; to; amount) ï¿½ { OK } u Powerset(BalanceViolation)
		balanceCheck(from; to; amount) = OK iff amountCond(ttRes)(amount) = true and
			availBalance(from) >= amount and Receivable(amount; to)
		ViolatesAmountCond(amount) if amountCond(ttRes)(amount) = false
		ViolatesLowerLimit(from; amount) if availBalance(from) < amount
		ViolatesUpperLimit(to; amount) if not Receivable(amount; to)
		Receivable(amt; acc) iff balance(acc) + amt <= upperLimit(acc)
*/
rule CreditPerformReq(msg, mbr) = {
	print mbr + " -> CreditPerformReq received" + msg
}

rule DebitPreviewReq(msg, mbr) = {
	print mbr + " -> DebitPreviewReq received" + msg
}

rule DebitPerformReq(msg, mbr) = {
	print mbr + " -> DebitPerformReq received" + msg
}


// ------------------------------------------------------------------
rule Program = {
	print "checking inbox"

    choose m in inboxOf(self) with getMessageSubject(m)="CreditReviewRequest" do {
    	// receive messages
    	msgIn := getMessageContent(m)

    	// when message received call CreditReviewRequest
    	if msgIn != undef then par
    		mbr := getMessageSender(m)
    		CreditPreviewReq(msgIn, mbr)
		endpar
    }
}
