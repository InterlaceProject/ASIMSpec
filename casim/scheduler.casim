CoreASIM scheduler

use Standard

init Start
scheduling whileRunning

universe CLIENT = { CreditRequestClient, DebitRequestClient, DebitAcknowledgeClient }
universe STATE = { SEND_CLIENT_MESSAGE, RECEIVE_CLIENT_MESSAGE, SCHEDULER_DONE }
universe TEST_STATE = { START, TEST_CREDIT, TEST_DEBIT }
controlled nextClient: TEST_STATE -> LIST
controlled currentTest: TEST_STATE
controlled activeClients: Integer

controlled initBy: CLIENT -> FUNCTION
controlled withProg: CLIENT -> FUNCTION
controlled andPol: CLIENT -> FUNCTION

controlled nextTest: TEST_STATE -> TEST_STATE
controlled activeList: CLIENT -> STRING

// not yet clear how asim scheduling works
policy whileRunning = {
	schedule server
	//if (temploc != undef) then schedule temploc
}

rule Start = {
	program(self) := Program
	
	
	currentTest := START
	nextTest(START) := TEST_DEBIT
	
	activeClients := 0
	
	nextClient(TEST_CREDIT) := [ CreditRequestClient ]
	nextClient(TEST_DEBIT)  := [ DebitAcknowledgeClient, DebitRequestClient ]
	
	//CreditRequestClient
	initBy(CreditRequestClient) := InitCreditRequestClient
	withProg(CreditRequestClient) := ProgramCreditRequestClient
	andPol(CreditRequestClient) := SkipCreditRequestClient
	
	//DebitRequestClient
	initBy(DebitRequestClient) := InitDebitRequestClient
	withProg(DebitRequestClient) := ProgramDebitRequestClient
	andPol(DebitRequestClient) := SkipDebitRequestClient
	
	//DebitAcknowledgeClient
	initBy(DebitAcknowledgeClient) := InitDebitAcknowledgeClient
	withProg(DebitAcknowledgeClient) := ProgramDebitAcknowledgeClient
	andPol(DebitAcknowledgeClient) := SkipDebitAcknowledgeClient
}

//-----------------------------------------------------------------------------------------------------------
//				begin scheduler main programm
//-----------------------------------------------------------------------------------------------------------
rule Program = local clientName in seq
	//wait a little before first client to spawn
	if stepcount >= 15 and activeClients = 0 then seq
		currentTest := nextTest(currentTest)
		
		//Client rules are defined in clientTemplate script
		if currentTest != undef then seq			
			forall createClient in nextClient(currentTest) do
				createASIM createClient
					initializedBy initBy(createClient)
					withProgram withProg(createClient)
					andPolicy andPol(createClient)
					in activeList(createClient)
					
			activeClients := | nextClient(currentTest) |
		endseq
		else activeClients := -1
		
		print "activeClients:: " + toString(activeClients)
	endseq
	
	if activeClients > 0 then
		//look into inbox if a client has been sent its message and could be destroyed
		choose m in inboxOf(self) with getMessageSubject(m)="Done" do seq
			clientName := getMessageSender(m)
			destroyASIM clientName
			print "--------------------------------------------------------------------------"
			print "client removed: " + clientName
			activeClients := activeClients - 1
		endseq
endseq