/*includeskip begin*/
CoreASIM initaccounts
use Standard
init dummy
rule dummy = skip
scheduling NoPolicy
policy NoPolicy = skip

//copied from scheduler
controlled profileTable: MEMBER_ID -> MAP
controlled accountTable: ACCOUNT_ID -> MAP
controlled userGroupTable: MEMBER_ID -> USER_TYPE_GROUP
controlled TT: OPERATION * UNIT * USER_TYPE_GROUP -> SET
controlled accountConnectivity: OPERATION * UNIT * ACCOUNT_TYPES -> SET
//controlled sessionData: STRING -> STRING
controlled sessionData: MAP
/*includeskip end*/

rule InitData = {
	//fake session information
	//sessionData("CreditRequestClient@CreditRequestClient") := "mbrId1"
	//sessionData("DebitAcknowledgeClient@DebitAcknowledgeClient") := "mbrId1"
	//sessionData("DebitRequestClient@DebitRequestClient") := "mbrId2"
	
	sessionData := {
		"CreditRequestClient@CreditRequestClient" -> "mbrId1",
		"DebitAcknowledgeClient@DebitAcknowledgeClient" -> "mbrId4",
		"DebitRequestClient@DebitRequestClient" -> "mbrId2"
	}

	//init profile data
	profileTable("mbrId1") := {
		"lowBalanceAlert" -> 700,
		"highBalanceAlert" -> 1000,		
		"highVolumeAlert" -> 10000,
		"capacity" -> 100000,
		//"saleVolume" -> 100000 //high volumn alert
		"saleVolume" -> 50000, //might be place somewhere else later
		"accounts" -> ["accId1", "accId4"]
	}
	profileTable("mbrId2") := {
		"lowBalanceAlert" -> 700,
		"highBalanceAlert" -> 500,		
		"highVolumeAlert" -> 10000,
		"capacity" -> 100000,		
		"saleVolume" -> 50000, //might be place somewhere else later
		"accounts" -> ["accId2", "accId5"]
	}
	profileTable("mbrId3") := {
		"lowBalanceAlert" -> 1000,
		"highBalanceAlert" -> 700,
		"highVolumeAlert" -> 10000,
		"capacity" -> 100000,		
		"saleVolume" -> 100000 //might be place somewhere else later
	}
	//init profile data
	profileTable("mbrId4") := {
		"lowBalanceAlert" -> 700,
		"highBalanceAlert" -> 1000,		
		"highVolumeAlert" -> 10000,
		"capacity" -> 100000,
		//"saleVolume" -> 100000 //high volumn alert
		"saleVolume" -> 50000, //might be place somewhere else later
		"accounts" -> ["accId6", "accId7"]
	}
	
	//init accounts
	//note: availableBalance = balance + creditLimit
	//note: availableCapacity = capacity - salevoulume
	accountTable("accId1") := {
		"AccountID" -> "accId1",
		"accountType" -> "CC",
		"MemberID" -> "mbrId1",
		"unit" -> "SRD",
		//"balance" -> toNumber(-9800), //test low balance alert
		//"balance" -> 19900, //test high balance alert
		"balance" -> 8000,
		"creditLimit" -> 10000,
		"creditLimitDate" -> "",
		"upperLimit" -> 20000
	}
	
	accountTable("accId2") := {
		"AccountID" -> "accId2",
		"accountType" -> "CC",
		"MemberID" -> "mbrId2",
		"unit" -> "SRD",
		"balance" -> 10000,
		"creditLimit" -> 10000,
		"creditLimitDate" -> "",
		"upperLimit" -> 20000
	}
	
	accountTable("accId3") := {
		"AccountID" -> "accId3",
		"MemberID" -> "mbrId2",
		"accountType" -> "Income",
		"unit" -> "EUR",
		"balance" -> 1000
	}
	
	accountTable("accId4") := {
		"AccountID" -> "accId4",
		"MemberID" -> "mbrId1",
		"accountType" -> "Income",
		"unit" -> "EUR",
		"balance" -> 1000
	}
	
	accountTable("accId5") := {
		"AccountID" -> "accId5",
		"MemberID" -> "mbrId2",
		"accountType" -> "Income",
		"unit" -> "EUR",
		"balance" -> 1000
	}
	
	accountTable("accId6") := {
		"AccountID" -> "accId6",
		"MemberID" -> "mbrId4",
		"accountType" -> "Income",
		"unit" -> "EUR",
		"balance" -> 1000
	}
	
	accountTable("accId7") := {
		"AccountID" -> "accId7",
		"accountType" -> "CC",
		"MemberID" -> "mbrId4",
		"unit" -> "SRD",
		"balance" -> 8000,
		"creditLimit" -> 10000,
		"creditLimitDate" -> "",
		"upperLimit" -> 20000
	}
	
	
	//init user groups
	userGroupTable("mbrId1") := "company"
	userGroupTable("mbrId2") := "company"
	
	//transfer groups
	TT("credit", "SRD", "company") := {"company", "employee", "MNGR", "full"}
	TT("credit", "SRD", "full") := {"company", "employee", "MNGR", "full"}
	TT("credit", "SRD", "MNGR") := {"retail", "company", "employee", "MNGR", "full"}
	TT("credit", "SRD", "employee") := {"retail", "company", "full"}
	TT("credit", "SRD", "consumer_verified") := {"retail", "company", "full"}
	
	forall x in {"retail", "company", "full", "MNGR"} do TT("debit", "SRD", x) := x	
	
	forall x in {"retail", "full"} do TT("debit", "EUR", x) := x
	
	//account connectivity (Test 2, D3.1)
	//only for user-initiated request, does not include system-initiated requests
	accountConnectivity("credit", "SRD", "CC") := {"CC", "DOMU", "MIRROR"}
	accountConnectivity("credit", "SRD", "DOMU") := {"CC"}
	accountConnectivity("credit", "SRD", "MIRROR") := {"CC"}
	
	accountConnectivity("debit", "SRD", "CC") := {"CC"}
	
	accountConnectivity("debit", "EUR", "Income") := {"Bisoo"}
}