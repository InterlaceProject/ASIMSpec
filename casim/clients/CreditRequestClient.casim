/*includeskip begin*/
CoreASIM CreditRequestClient
use Standard 
init dummy
rule dummy = skip
scheduling NoPolicy
policy NoPolicy = skip
/*includeskip end*/


// ------------------------------- !!important!! -------------------------------
// Global definitions are NOT used when instantiating a client "dynamically"
// because "createASIM" function only allows to provide init, program and policy.
// Thus globally used variables are defined by their first usage.
// These definitions here are just placed to avoid warnings in eclipse
// ------------------------------- !!important!! -------------------------------
controlled messageNext: SET
controlled client_state: STRING
controlled CREDITREQUEST: MAP

controlled CreditReviewRequest: STRING
controlled DoNotProceedMessage: STRING
controlled ProceedMessage: STRING
controlled TransferPerformed: STRING
controlled CreditPerformReq: STRING

controlled RECEIVE: STRING
controlled SEND: STRING
controlled TERMINATE: STRING
controlled DONE: STRING


policy ClientSkip = skip

rule InitClient = seq
	//cannot be done facilitating universe definition
	//see !!important!! comment on top. thus here
	//"pseudo"-static definition used
	CreditReviewRequest := "CreditReviewRequest"
	ProceedMessage := "ProceedMessage"
	DoNotProceedMessage := "DoNotProceedMessage"
	TransferPerformed := "TransferPerformed"
	CreditPerformReq := "CreditPerformReq"
	
	RECEIVE := "RECEIVE"
	SEND := "SEND"
	TERMINATE := "TERMINATE"
	DONE := "DONE"
	
	//init variables
	messageNext := { CreditReviewRequest }
	client_state := SEND
	CREDITREQUEST := {
					"from" -> "accId1",
					"to" -> "accId2",
					"channel" -> "Service",
					"amount"  -> 2000,
					"metadata" -> {"message", "some transfer"}
				}
endseq

rule ProgramClient = local msgSubject, message, mbr in par
	//print "client_state:: " + client_state + "; messageNext:: " + messageNext + "; CreditReviewRequest:: " + CreditReviewRequest
	
	//send initial request
	if (CreditReviewRequest memberof messageNext) = true and client_state = SEND then par
		messageNext := { DoNotProceedMessage, ProceedMessage}
		client_state := RECEIVE
		send CREDITREQUEST  to "server" with subject CreditReviewRequest		
	endpar
	else
	// check for proceedmessage message
	if client_state = RECEIVE then par
		forall m in inboxOf(self) do seq
			//fetch message data
			msgSubject := getMessageSubject(m)
			message := getMessageContent(m) //maybe contains some kind of signature in production
			mbr := getMessageSender(m)
			
			//handle message - only if they are from a specific location 
			if (mbr = "server@server") then seq
				if msgSubject = ProceedMessage then seq
					print "sending message CreditPerformReq to server"
					send CREDITREQUEST  to "server" with subject CreditPerformReq
					messageNext := { TransferPerformed, DoNotProceedMessage }					
				endseq
				else if msgSubject = DoNotProceedMessage then seq
					print "cannot proceed with request: " + message
					client_state := TERMINATE
				endseq
				else if msgSubject = TransferPerformed then seq
					print "Transfer status: " + message
					client_state := TERMINATE
				endseq
				else seq
					print "unknown message: "+ message + ", stopped listenting."
					client_state := TERMINATE
				endseq
			endseq
		endseq
	endpar
	else
	//send done message
	if client_state = TERMINATE then par
		//"destroyASIM self" not working
		//destroyASIM <name> would work but I don't know how to determine the name of the current ASIM
		//=> send done message to scheduler which ends the asim by retrieving the sender name
		send "Done" to "scheduler" with subject "Done"
		client_state := DONE
	endpar
endpar