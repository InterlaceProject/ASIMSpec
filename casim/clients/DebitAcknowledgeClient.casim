/*includeskip begin*/
CoreASIM DebitAcknowledgeClient
use Standard 
init dummy
rule dummy = skip
scheduling NoPolicy
policy NoPolicy = skip

// ------------------------------- !!important!! -------------------------------
// Global definitions are NOT used when instantiating a client "dynamically"
// because "createASIM" function only allows to provide init, program and policy.
// Thus globally used variables are defined by their first usage.
// These definitions here are just placed to avoid warnings in eclipse
// ------------------------------- !!important!! -------------------------------
controlled client_state: STRING
controlled DebitAckCompletion: STRING
controlled ConfirmationReq: STRING

controlled RECEIVE: STRING
controlled TERMINATE: STRING
controlled DONE: STRING
// ------------------------^^^^^^^ read important ^^^^^^^------------------------ 
/*includeskip end*/

policy SkipDebitAcknowledgeClient = skip

rule InitDebitAcknowledgeClient = seq
	//cannot be done facilitating universe definition
	//see !!important!! comment on top. thus here are
	//"pseudo"-static definition used
	ConfirmationReq := "ConfirmationReq"
	DebitAckCompletion := "DebitAckCompletion"
	
	RECEIVE := "RECEIVE"
	TERMINATE := "TERMINATE"
	DONE := "DONE"
	
	client_state := RECEIVE			
	program(self) := ProgramDebitAcknowledgeClient
endseq

rule ProgramDebitAcknowledgeClient = local msgSubject, message, mbr in par
	//print "client_state:: " + client_state + "; messageNext:: " + messageNext + "; DebitPreviewReq:: " + DebitPreviewReq
	
	// check for proceedmessage message
	if client_state = RECEIVE then par
		forall m in inboxOf(self) do seq
			//fetch message data
			//maybe message contains some kind of signature in production
			//which needs to be checked			
			msgSubject := getMessageSubject(m)
			message := getMessageContent(m) 
			mbr := getMessageSender(m)
			
			//handle messages - only if they are from the server
			if mbr = "server@server" and msgSubject = ConfirmationReq then seq
				print "Received: " + msgSubject
				print "  Message: " + message
				print "  From mbr: " + mbr
			endseq
		endseq
	endpar
	else
	//send done message
	if client_state = TERMINATE then par
		//"destroyASIM self" not working
		//destroyASIM <name> would work but I don't know how to determine the name of the current ASIM
		//=> send done message to scheduler which ends the asim by retrieving the sender name
		send "Done" to "scheduler" with subject "Done"
		client_state := DONE
	endpar
endpar