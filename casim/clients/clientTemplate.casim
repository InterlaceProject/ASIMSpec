/*includeskip begin*/
CoreASIM clientTemplate

use Standard

use Standard 
init dummy
rule dummy = skip
scheduling NoPolicy
policy NoPolicy = skip
/*includeskip end*/

policy ClientSkip = skip

rule InitClient = par
	//init variables
	sent := false
	done := false
	proceedmessage := false
	cnt := 0
endpar

rule ProgramClient = local msgSubject, message, mbr in par
	cnt := cnt + 1
	
	//send done message
	if sent and proceedmessage and not done then par
		//"destroyASIM self" not working
		//destroyASIM <name> would work but I don't know how to determine the name of the current ASIM
		//=> send done message to scheduler which ends the asim by retrieving the sender name
		send "Done" to "scheduler" with subject "Done"
		done := true
	endpar
	
	// check for proceedmessage message
	if sent and not proceedmessage and not done then		
		forall m in inboxOf(self) do seq
			//fetch message data
			msgSubject := getMessageSubject(m)
			message := getMessageContent(m) //maybe contains some kind of signature in production
			mbr := getMessageSender(m)
			
			if (mbr = "server@server") then seq
				if msgSubject = "ProceedMessage" then seq
					print "sending message CreditPerformReq to server"
					send {
							"from" -> "accId1",
							"to" -> "accId2",
							"channel" -> "Service",
							"amount"  -> 2000,
							"metadata" -> {"message", "some transfer"}
						}  to "server" with subject "CreditPerformReq"
					//dummy skip - if left out, above send is not working
					skip
				endseq
				else
					print "cannot proceed with request: " + message
					
				proceedmessage := true
			endseq
			else
				if cnt % 20 = 0 then
					print "waiting for ProceedMessage..."
							
		endseq
	
	//send initial request
	if not sent then par
		send {
				"from" -> "accId1",
				"to" -> "accId2",
				"channel" -> "Service",
				"amount"  -> 2000,
				"metadata" -> {"message", "some transfer"}
			}  to "server" with subject "CreditReviewRequest"
		sent := true
	endpar
endpar